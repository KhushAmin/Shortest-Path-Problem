/* Khush Amin 
April, 6th 2017
Explanation of my project and experience:

Input: Click on any two points on the above map
Output:  Cost/Distance between two points
Tools: Java, Eclipse, Processing Language for GUI, Windows 10
This project is a basic implementation of the shortest path problem. I wrote vertex () and graph () classes to interact with two-dimensional space. With fixed costs, I implemented Dijkstra's algorithm in my "W Graph" class. These theoretical implementations were all done in Java (in Eclipse). I transferred the entire code into another editor of a language called Processing.  Processing is a language more suitable for programming GUIs. There I used an image of a map of Antarctica on which I created a set of made-up paths (by mouse-clicking on the starting point and the ending point) In order to make a user-friendly way of “seeing” what Dijkstra's algorithm does. Total project took me about 17 hours (including the time It took me to self-teach the language Processing).

I learned

(1) The implementation of Dijkstra's algorithm
(2) Complex debugging across different languages and editors
(3) A whole new language – Processing

Code:


WGraph:
*/

public class WGraph extends Graph{
  private static final int MAX_INT = 2147483647;

  public int nVertsConnected;
  public DistPar[] sPath;

  private int currVert;
  private int start2Curr;
  
  public WGraph(){
    super();
    nVertsConnected=0;
  }
  
  public void addEdge(int start, int end, int cost){
    adjMat[start][end] = cost;
    adjMat[end][start] = cost;
  }
  
  public int getMin(){
    int min = MAX_INT;
    int retrn = 0;
    for(int i=0; i<nVerts; i++){
      if(sPath[i].cost < min && !vertxList[i].wasVisited && sPath[i].cost!=0){
        min = sPath[i].cost;
        retrn = i; 
      }
    }
    return retrn; 
  } 
  
  public void adjustPath(){
    int col = 0;
    while(col < nVerts){
      if(vertxList[col].wasVisited){
        col++;
        continue;
      }
      int curr2Fringe = adjMat[currVert][col];
      if (curr2Fringe<1000){
        int start2Fringe = start2Curr + curr2Fringe;

        if(start2Fringe < sPath[col].cost){
          sPath[col].via = currVert;
          sPath[col].cost = start2Fringe;
        }
      }
      col++;
    }
  } 
  
  
  public void path(int start, int end){
    sPath = new DistPar[nVerts];

    vertxList[start].wasVisited = true;
    nVertsConnected  = 1;
    
    for(int i=0; i<nVerts; i++){
      sPath[i] = new DistPar(adjMat[start][i], start);
    }
    
    while(nVertsConnected < nVerts){
      int indMin = getMin();
      
      currVert = indMin;
      start2Curr = sPath[indMin].cost;
      
      vertxList[currVert].wasVisited = true;
      nVertsConnected++;

      adjustPath();
      
    }
  System.out.println ("path from "+vertxList[start].label+" to "+vertxList[end].label+"\tcost: "+sPath[end].cost);
    
    nVertsConnected = 0;
    for(int j=0; j<nVerts; j++){
      vertxList[j].wasVisited = false;
    }

  }
  

  
  public class DistPar{
    public int cost;
    public int via;
    
    public DistPar(int c, int v){
      cost=c;
      via=v;
    }
  }
  
}


// Graph:
public class Graph {
  private static final int MAX_INT = 2147483647;
  private final int MAX_VERTS = 20;
  public Vertex[] vertxList;
  public int[][] adjMat;
  public int nVerts;
  
  public Graph(){
    nVerts=0;
    vertxList = new Vertex[MAX_VERTS];
    adjMat = new int[MAX_VERTS][MAX_VERTS];
    for(int i=0; i< MAX_VERTS ; i++){
      for(int j=0; j<MAX_VERTS ; j++){
        if (i==j){
          adjMat[i][j]= 0;
        } else{
          adjMat[i][j]= MAX_INT;
        }
      }
    }
  }
  
  public void addVertex(char lab, int x, int y){
    vertxList[nVerts++] = new Vertex(lab,x,y);
  }
  
  public void addEdge(int start, int end){
    adjMat[start][end] = 1;
    adjMat[end][start] = 1;
  }
  
  public void displayVertex(int v){
    System.out.println(vertxList[v].label);
  }
        
}

// Vertex:
public class Vertex {
  public char label;
  public boolean wasVisited;
  private String labStr = ""+label;
  public int x;
  public int y;
  
  public Vertex(char lab, int X, int Y){
    label = lab;
    x=X;
    y=Y;
    wasVisited=false;
  }
  
  public String toString(){
    return labStr;
  }
}

// main tab: (in Processing)
int vert1x;
int vert1y;
int vert2x;
int vert2y;
int vert3x;
int vert3y;
int vert4x;
int vert4y;
int vert5x;
int vert5y;
int vert6x;
int vert6y;
int vert7x;
int vert7y;

int strt;
int end;
int count;

PImage map;

WGraph wg;

void setup(){
  vert1x = 666;
  vert1y = 754;
  vert2x = 599;
  vert2y = 506;
  vert3x = 92;
  vert3y = 184;
  vert4x = 463;
  vert4y = 225;
  vert5x = 915;
  vert5y = 152;
  vert6x = 1097;
  vert6y = 425;
  vert7x = 1097;
  vert7y = 691;
  
  count=0;
  size(1257,985);
  map = loadImage("antarctic.PNG");
  wg = new WGraph();
  wg.addVertex('A', vert1x, vert1y);
  wg.addVertex('B', vert2x, vert2y);
  wg.addVertex('C', vert3x, vert3y);
  wg.addVertex('D', vert4x, vert4y);
  wg.addVertex('E', vert5x, vert5y);
  wg.addVertex('F', vert6x, vert6y);
  wg.addVertex('G', vert7x, vert7y);
    wg.addEdge(0,1,300);
    wg.addEdge(1,2,400);
    wg.addEdge(2,3,200);
    wg.addEdge(3,4,400);
    wg.addEdge(4,5,350);
    wg.addEdge(5,6,500);
    wg.addEdge(0,6,300);
    wg.addEdge(1,3,200);
    wg.addEdge(1,5,500);
    
}

void draw(){

  image(map,0,0, map.width*2, map.height*2); 
       strokeWeight(13);
   stroke(170,30,0);
    ellipse(vert1x,vert1y,13,13);
    ellipse(vert2x,vert2y,13,13);
    ellipse(vert3x,vert3y,13,13);
    ellipse(vert4x,vert4y,13,13);
    ellipse(vert5x,vert5y,13,13);
    ellipse(vert6x,vert6y,13,13);
    ellipse(vert7x,vert7y,13,13);
  if (count%2 == 0 && count>0){
    printPath();
  }
}

void mouseClicked(){
  count ++;
  if (count%2==0){
      if (mouseX > vert1x-30 && mouseX < vert1x+30 && mouseY > vert1y-30 && mouseY < vert1y+30){
          end = 0;
      }else if (mouseX > vert2x-30 && mouseX < vert2x+50 && mouseY > vert2y-30 && mouseY < vert2y+30){
          end = 1;
      }else if (mouseX > vert3x-30 && mouseX < vert3x+50 && mouseY > vert3y-30 && mouseY < vert3y+30){
          end = 2;
      }else if (mouseX > vert4x-30 && mouseX < vert4x+50 && mouseY > vert4y-30 && mouseY < vert4y+30){
          end = 3;
      }else if (mouseX > vert5x-30 && mouseX < vert5x+50 && mouseY > vert5y-30 && mouseY < vert5y+30){
          end = 4;
      }else if (mouseX > vert6x-30 && mouseX < vert6x+50 && mouseY > vert6y-30 && mouseY < vert6y+30){
          end = 5;
      }else if (mouseX > vert7x-30 && mouseX < vert7x+50 && mouseY > vert7y-30 && mouseY < vert7y+30){
          end = 6;
      }
      wg.path(strt,end);
//      points = wg.path(strt,end);
      
   } else if (count%3 != 0){
      if (mouseX > vert1x-30 && mouseX < vert1x+30 && mouseY > vert1y-30 && mouseY < vert1y+30){
          strt = 0;
      }else if (mouseX > vert2x-30 && mouseX < vert2x+50 && mouseY > vert2y-30 && mouseY < vert2y+30){
          strt = 1;
      }else if (mouseX > vert3x-30 && mouseX < vert3x+50 && mouseY > vert3y-30 && mouseY < vert3y+30){
          strt = 2;
      }else if (mouseX > vert4x-30 && mouseX < vert4x+50 && mouseY > vert4y-30 && mouseY < vert4y+30){
          strt = 3;
      }else if (mouseX > vert5x-30 && mouseX < vert5x+50 && mouseY > vert5y-30 && mouseY < vert5y+30){
          strt = 4;
      }else if (mouseX > vert6x-30 && mouseX < vert6x+50 && mouseY > vert6y-30 && mouseY < vert6y+30){
          strt = 5;
      }else if (mouseX > vert7x-30 && mouseX < vert7x+50 && mouseY > vert7y-30 && mouseY < vert7y+30){
          strt = 6;
      }
      
      System.out.println(strt);
   }
}

void printPath(){
    for (int i=end; i!=strt; i=wg.sPath[i].via){
      strokeWeight(5);
      stroke(170,30,0);
      line(wg.vertxList[i].x, wg.vertxList[i].y,wg.vertxList[wg.sPath[i].via].x, wg.vertxList[wg.sPath[i].via].y);
      textSize(32);
      text("cost: "+wg.sPath[end].cost, 70, 950); 
      fill(170, 30, 10);
    }
}
